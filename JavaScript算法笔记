```
//插入排序算法
var a = [12,56,78,90,34,789,4895,434,656,1323,9863];
for(i=1;i<a.length-1;i++)
{
temp = a[i];
    for(j=i-1;j>=0;j--)
       {
       if(temp>a[j])
          break;
          a[j+1]=a[j];
       }
       a[j+1] = temp;
}
//要注意保存a[i]的值给一个变量，因为后面发生a[j+1] = a[j] ,所以数组里面的值顺序会发生变化
     
```
```
var a = [12,56,78,90,34,789,4895,434,656,1323,9863];
for(i=0;i<a.length-1;i++)//一直比较到倒数第二个数
{
   k = i;
    for(j=k;j<a.length;j++)//最后一个数也要比较
      {
        if(a[j]<a[k])
         k = j;
      }
      
      if(k!==i)
      {
      temp = a[k];
      a[k] = a[i];
      a[i] = temp;
      }//这里记得加大括号！！！
      
}//k始终是保存最小的值的对应的数组下标
      
```

```
可以让“I am a student”  变成  “I Am A Student”
String.prototype.toJadenCase = function(){return this.split(" ").map(function(word){
return word.charAt(0).toUpperCase()+word.slice(1);}).join(" ")};
也可以使用这个正则表达式：
String.prototype.toJadenCase = function () {
 return this.replace(/(^|\s)[a-z]/g,function(x){return x.toUpperCase();})
};
```

处理1+1/4+1/7+1/10....的问题  可以把1看成1/1然后 对每一个除号的数 单独求出它的规律 出来 再用一般的求和方法 就可以得到了。思路清晰  总结：当自己的思路
不清楚的时候 不妨换个思路 一切可能海阔天空！
function SeriesSum(n)
{
 for(var i=0,s=0;i<n;i++)
 {
 s+=1/(i*3+1);
 }
 return s.toFixed(2);
}


取url字符串
function getQuery(url)
{
var obj ={};var urlQ = url.split("?")[1]
var queryArr = urlQ.split("&");console.log(queryArr);
queryArr.forEach(function(item,index){
 var key=item.split("=")[0];
 var value=item.split("=")[1];
 if(value==undefined)
 value="";
 if(obj.hasOwnProperty(key))
 {
 if(! (obj[key] instanceof Array))
 {
 var preValue = obj[key];
 obj[key] = [];
 obj[key].push(preValue);
 obj[key].push(value);
 }
 else{
 obj[key] = value;
 }
 }
 else{
 obj[key] = value;
 }
});
return obj;
}



深拷贝：
/**
思路：首先判断传入进来的是不是引用类型，用typeof来判断，然后判断是数组还是对象，使用instanceof来判断，再次看看浏览器是否支持window.JSON对象，可以
使用它的stringify方法把传入的值进行序列化，然后用parse转换回来

**/
function deepCopy(obj)
{
if(typeof obj !=="object")
{
return;
}
var newObj = obj instanceof Array ? [] : {};
if(window.JSON)
{
var str = JSON.stringify(obj);
newObj = JSON.parse(str);
}
else{
for(var key in obj)
{
newObj = typeof obj[key] ==="object"?deepCopy(obj[key]):obj[key];
}
}
return newObj;
}




JavaScript的跨浏览器事件绑定和阻止冒泡，阻止默认事件处理程序，以及事件委托都在这里了！
<!DOCTYPE html>
<head>
<meta charset="UTF-8">
<title>你妹</title>
</head>
<body>
<div id="box">
 <ul>
   <li id="list1">点击我弹出你好</li>
   <li id="list2">点击我弹出你妹</li>
   <li id="list3">停止事件冒泡</li>
   <li><a id="list4" href="http://baidu.com">取消默认行为</a></li>
 </ul>
</div>
<script>
eventUtil = {
addHandler:function(elem,type,handler)
{
if(elem.addEventListener)
{
elem.addEventListener(type,handler,false);
}
else if(elem.attachEvent)
{
elem.attachEvent("on"+type,handler);
}
else{
elem["on"+type]=handler;
}
},
removeHandler:function(elem,handler)
{
if(elem.removeEventListener)
{
elem.removeEventListener(type,handler,false);
}
else if(elem.detachEvent)
{
elem.detachEvent("on"+type,handler);
}
else{
elem["on"+type]=null;
}
}

}//封装了跨浏览器的事件处理函数


var boxElem = document.getElementById("box");
eventUtil.addHandler(boxElem,"click",function(e){
if(e.target.id==="list1")
{
alert("你好");
}
else if(e.target.id==="list2")
{
alert("你妹");
}
});//事件冒泡得到一个事件托管
eventUtil.addHandler(document.getElementById("box"),"click",function(){alert("这个是外层的box！");});//事件冒泡
eventUtil.addHandler(document.getElementById("list3"),"click",function(e){e.stopPropagation();alert(e.target.innerHTML);});//使用e.stopPropagation()方法阻止冒泡
eventUtil.addHandler(document.getElementById("list4"),"click",function(e){e.preventDefault();alert("我阻止了链接跳转到其他的页面");});
</script>
</body>
</html>



给定一个对象，输出每个层次的键：在这里要注意 使用concat方法拷贝数组的时候并没有把属性拷贝过去，这个时候就要注意了哈
function foo(obj,arr,layer)
{
	var b = [];
	    b.currLayer = layer;
	var objArr =[];
	for(var key in obj)
	{
		b.push(key);
		if(obj[key] instanceof Object)
		{
			objArr.push(obj[key]);
		}
	}
	var flag = false;
	for(var j=0;j<arr.length;j++)
	{
		if(arr[j].currLayer===b.currLayer)
		{
			arr[j] = arr[j].concat(b);
			arr[j].currLayer = b.currLayer;
			flag = true;
			console.log(arr[j]);
		}
	}
	if(!flag)
	arr.push(b);

   for(var j=0;j<objArr.length;j++)
   {
   	foo(objArr[j],arr,layer+1);
   }
    return arr;
}
      	
      	
      	var obj = {
      		a:{
      			b:{
      				c:{
      					d:1
      				}
      			}
      		},
      		e:{
      			f:{
      				g:1
      			}
      		},
      		h:1,
      		i:{
      			j:{
      				k:12
      			}
      		}
      	}








