JavaScript语法中  call 的用法，其实每个函数都有call这个方法，call这个方法真正的作用是用来扩充函数赖以运行的作用域的，apply方法和call差不多，区别仅仅
在于接收参数的方式不同而已，对于call()而言，第一个参数this值并没有变化，变化的是其余的参数都是直接传递给函数的，换句话说在使用call()的时候，传递给call()
的参数必须逐个列举出来，具体再看书吧。
```var color = "red";
var o = {
color:"blue"
}
var getColor = function()
{
return this.color;
}
console.log("执行getColor()方法"+getColor());

console.log("执行getColor.call(o)"+getColor.call(o));```


作用域安全的构造函数：
function Person(name,age,job)
{
this.name = name;
this.age = age;
this.job = job;
}

在这里把Person作为构造函数来用，var person1 = new Person("zrc",12,"前端开发工程师");
在new的过程中实际发生的是执行流进入Person函数里面进行代码的执行，如下：
function Person(name,age,job)
{
//隐含创建一个 空对象{}
//将构造函数的作用域赋值给新对象，于是隐含this指向这个空对象，var this = {};
this.name = name;
this.age = age;
this.job = job;
//隐含返回这个this对象 return this;
}
函数new了之后返回的对象就赋值给了person1 ，所以person1就是一个对象了；


在这里设计的构造函数并不安全，比如说，当用户忘记使用new操作符的时候，例如 var person2 = Person("tt",21,"gis设计师");这个时候
由于没有new这个关键字，Person会被当成一个普通的函数执行了，由于在全局作用域下执行，那么它里面的this就是window，并且也不会返回对象，他只是
修改或者给window增加一些属性。这个this是在调用的时候才确定的，属于运行时绑定，谁调用它，this就是指的是谁，在全局作用域下就是window，
所以这没有得到我们想要的效果，更糟糕的是，可能修改了window一些属性值，造成不可预测的灾难，所以这是极其不安全的行为，为此我们可以改变一下构造函数
的设计，确保安全，改造如下：
function Person(name,age,job)
{
if(this instanceof Person)
{
this.name = name;
this.age = age;
this.job = job;
}
else {
return new Person(name,age,job);
}
}


javascript的数值转换函数，包括3种：1、Number()  2、parseInt()  3、parseFloat()
Number()方法可以接受任何的类型，而parseInt()只能接受字符串类型的参数，这个参数是第一个参数，第二个参数是指定这个
字符串里面的数字是什么进制的 比如说 2  表示二进制  8 表示 八进制等等   但是 需要记住的是  这些函数转换出来的都是十进制数哦！！！
```
var num1 = parseInt("100",2)//4
var num2 = parseInt("11",8)//9
```
parseFloat()和parseInt()方法差不多，主要区别是 parseFloat（）方法只能解析十进制数 所以没有第二个参数 
其他的用的比较少 到时候需要再说！！！！



转换成字符串  除了 undefined 和 null 这两个值没有toString()方法之外 其他的都有
特别的 数值调用 toString()可以给这个函数传递一个参数，指定把数值转换成几进制？
```
var num =10;
alert(num.toString(2))//“1010”
```

函数String()可以给任何值转型成字符串，特别的  对于 String(null) ,String(undefined) ,分别产生 “null”和 “undefined”



javascript 字符串：
String 类型是字符串的对象包装类型，可以像下面这样使用String构造函数来创建
var stringObj = new String("hello world");
String 类型的每个实例都有 length属性，eg：var stringValue = "hello world";alert(stringValue.length);


字符方法：charAt()和charCodeAt()。可以得出给定位置的字符串
eg: var stringValue = "hello world";
    alert(stringValue.charAt(1));//“e”
    alert(stringValue.charCodeAt(2));//"97"
    
    字符串的操作方法：
    字符串相加：1：使用“+”  2、使用concat方法    
    eg:var stringValue = "hello";
       var result = "";
           result = stringValue.concat(" world");
           console.log(result);//"hello world"
           console.log(stringValue);//"hello" 注意到 使用了concat 对原来的字符串没有影响
    其实concat这个方法可以有多个参数的
    
    
    获取子串的方法： 1、slice()  2、substring()  3、substr()
   其中slice()和substring方法的第一个参数是子串的起点位置，第二个参数表示子字符串最后面的那个字符的后面一个位置，也就是不包括这个位置的字符串
   substr()方法的第一个参数和上面的一样  不同的就是 第二个参数表示 子字符串的长度
   如果不指定第二个参数 那么就表示从第一个参数的位置取完后面的字符串；
   这些方法和concat方法一样 不会影响到原始字符串
   当然还有一些区别  比较详细 详情请看124页  《JavaScript高级程序设计》
   
   
   
    
    字符串的位置方法：
    有两个方法：indexOf（） 和 lastIndexOf()  
       indexOf()从开头往后找，lastIndexOf()从后往前找  找到了就返回位置  找不到就返回-1；
       这两个方法  还可以有第二个参数 用来指定从哪个位置开始搜索
       
     trim()方法，这个方法会创建一个字符串的副本 并把字符串的前后空格删掉
     
     
     字符串大小写方法  ：这个很简单 
     
     
     字符串模式匹配方法：
     
       
       
       注意：数组转换成字符串的时候用join（）方法  字符串转换成数组的时候用 split()
    1==true;//这个会返回true 主要原因是 true会转换为1 所以  返回true 
    所以 2==true 以及其他的等于 true就会返回false
    在==时 转换都是 往Number方向转换的，而在if（）语句的时候是往Boolean方向转换的，所以有时候 if(2) 2可以转换为true哦！！！
       
       
    
    
    
    setInterval 和 setTimeout的注意事项
    首先这两个方法都会返回一个id值，我们可以根据这个id值来传入clearInterval 或者 clearTimeout 方法来清除掉定时器
    代码如下：
    function sayHello()
  {   var i = 0;
     return {
	 timer:function(){
	 this.timerId = 
	 setInterval(function(){
	 console.log(i++);
	 },1000);
	 },
	 timerId:"",
	 cancel:function(){
	 
	 clearInterval(this.timerId);//注意这里只能清除this.timerId  而不能使用this.timer,因为这this.timer返回的是一个函数的字面量表达式
	 }
	 }
  }
    
    
    
    
       什么是json？
JSON就是一种表示结构化数据的格式，他只是一种数据格式而不是一门编程语言，并且目前这种数据的格式已经成为数据交换的标准。json语法可以表示 简单值，对象，数组三种类型。
最简单的json数据格式就是简单值 如“helloworld” 5 等等；
表示对象的时候，就是和JavaScript的对象字面量长的很像，就是键值对那个键要加双影号，以及json没有变量的概念，后面也没有分号，因为他不是
一个JavaScript语句
表示数组的时候几乎和JavaScript的数组一模一样，就是没有变量和后面那个分号而已
    eg:[{"name":"zrc",age:21,school:{"name":csu,"location":"changsha"}},{后面的差不多},{}]
    
    
    解析和序列化：
  ECMA5标准定义了全局对象JSON，这个JSON拥有两个方法，分别是stringify和parse，分别是把一个JavaScript序列化成一个字符串，把一个字符串解析成一个JavaScript对象。注意在序列化JavaScript对象中，所有的原型成员以及函数全部被忽略掉。，值为undefined也会被忽略掉。！
    
    var obj = {
name:"zhengrucong",
age:21,
wife:{
name:"xm",
age:21,
son:[{name:"zhengdada",age:2},{name:"zhengyeye",age:1}]
}
}

var jsonStr = JSON.stringify(obj);
console.log(jsonStr);


结果："{"name":"zhengrucong","age":21,"wife":{"name":"xm","age":21,"son":[{"name":"zhengdada","age":2},{"name":"zhengyeye","age":1}]}}"

把var jsonStr = JSON.stringify(obj);换成：var jsonStr = JSON.stringify(obj,function(key,value){
if(key =="name")
{
return "yeyede"
}
else return value;
});
   结果，所有的name都变成了yeyede,这个函数叫做过滤函数。 
    "{"name":"yeyede","age":21,"wife":{"name":"yeyede","age":21,"son":[{"name":"yeyede","age":2},{"name":"yeyede","age":1}]}}"
    
    加第三个参数：如果是数字就是表示空格数，如果是字符串就是以这个字符串作为分割符。	
    
    var jsonStr = JSON.stringify(obj,null,"<----->");
    {
<----->"name": "zhengrucong",
<----->"age": 21,
<----->"wife": {
<-----><----->"name": "xm",
<-----><----->"age": 21,
<-----><----->"son": [
<-----><-----><----->{
<-----><-----><-----><----->"name": "zhengdada",
<-----><-----><-----><----->"age": 2
<-----><-----><----->},
<-----><-----><----->{
<-----><-----><-----><----->"name": "zhengyeye",
<-----><-----><-----><----->"age": 1
<-----><-----><----->}
<-----><----->]
<----->}
}

var jsonStr = JSON.stringify(obj,null,4);
console.log(jsonStr);
VM100:12 {
    "name": "zhengrucong",
    "age": 21,
    "wife": {
        "name": "xm",
        "age": 21,
        "son": [
            {
                "name": "zhengdada",
                "age": 2
            },
            {
                "name": "zhengyeye",
                "age": 1
            }
        ]
    }
}


parse方法也和stringify方法差不多，就不在这里啰嗦了。
    
    
    
 关于JavaScript数组的forEach用法的坑。
 var foo = function(str)
{
	 var a = str.split("-");
	 a.forEach(function(item,index){
           item = item.charAt(0).toUpperCase()+item.slice(1);console.log(item);
	 });
	 return a.join("");
}
    这种情况下用给值item赋值，根本不能够改变原来的数组的值，因为这里是一个回调函数，每次传进来的只是一个临时变量而已，要改变，可以使用a[index]或者
    使用另外一种遍历方法map
    
    
   var foo = function(str)
{
	 var a = str.split("-");
	 a.forEach(function(item,index){
        a[index] = item.charAt(0).toUpperCase()+item.slice(1);console.log(item);
	 });
	 return a.join("");
} 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    










